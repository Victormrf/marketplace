generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_role {
  CUSTOMER
  SELLER
  ADMIN
}

model user {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      user_role
  createdAt DateTime  @default(now())
  Customer  customer?
  Seller    seller?
  reviews   review[] 
  cartItems cart_item[]
}

model customer {
  id      String  @id @default(uuid())
  userId  String  @unique
  address String
  phone   String
  user    user    @relation(fields: [userId], references: [id])
  orders  order[]
  
}

model seller {
  id          String    @id @default(uuid())
  userId      String    @unique
  storeName   String
  logo        String?
  description String?
  rating      Float     @default(0)
  products    product[]
  user        user      @relation(fields: [userId], references: [id])
  reviews     review[]
}

enum category {
  Office
  Sports
  Books
  Beauty
  Clothing
  Toys
  TvProjectors
  SmartphonesTablets
  Eletronics
  Pets
  Furniture
}

model product {
  id          String       @id @default(uuid())
  sellerId    String
  name        String
  description String?
  price       Float
  stock       Int
  category    category
  image       String?
  createdAt   DateTime     @default(now())
  cartItems   cart_item[]   
  orderItems  order_item[]
  seller      seller       @relation(fields: [sellerId], references: [id])
  reviews     review[]
}

model review {
  id         String   @id @default(uuid())
  user       user     @relation(fields: [userId], references: [id])
  userId     String   
  product    product? @relation(fields: [productId], references: [id])
  productId  String?
  seller     seller?  @relation(fields: [sellerId], references: [id])
  sellerId   String?
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  
  @@unique([userId, productId])
  @@unique([userId, sellerId])
}

model cart_item {
  id         String   @id @default(uuid())
  userId String
  productId  String
  quantity   Int
  createdAt  DateTime @default(now())

  user    user    @relation(fields: [userId], references: [id])
  product product @relation(fields: [productId], references: [id])
}

enum order_status {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model order {
  id         String       @id @default(uuid())
  customerId String
  totalPrice Float
  status     order_status  @default(PENDING)
  createdAt  DateTime     @default(now())
  customer   customer     @relation(fields: [customerId], references: [id])
  orderItems order_item[]
  payment    payment?
  delivery   delivery?
}

model order_item {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Float
  order     order   @relation(fields: [orderId], references: [id])
  product   product @relation(fields: [productId], references: [id])
}

enum payment_method {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  PAYPAL
}

model payment {
  id        String   @id @default(uuid())
  orderId   String   @unique
  amount    Float
  status    String
  method    payment_method
  createdAt DateTime @default(now())
  order     order    @relation(fields: [orderId], references: [id])
  refund    refund?
}

enum refund_status {
  REQUESTED
  APPROVED
  DECLINED
  COMPLETED
}

model refund {
  id         String        @id @default(uuid())
  paymentId  String        @unique
  amount     Float
  reason     String?
  status     refund_status @default(REQUESTED)
  createdAt  DateTime      @default(now())

  payment    payment       @relation(fields: [paymentId], references: [id])
}

enum delivery_status {
  SEPARATED
  PROCESSING
  SHIPPED
  COLLECTED
  ARRIVED_AT_CENTER
  DELIVERED
  FAILED
  RETURNED
}

model delivery {
  id          String          @id @default(uuid())
  orderId     String          @unique
  trackingCode String?
  carrier     String?
  status      delivery_status @default(SEPARATED)
  estimatedDelivery DateTime?
  deliveredAt DateTime?
  createdAt   DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  order       order           @relation(fields: [orderId], references: [id])
  statusLogs          DeliveryStatusLog[]
}

model DeliveryStatusLog {
  id          String         @id @default(uuid())
  deliveryId  String
  status      delivery_status
  changedAt   DateTime       @default(now())

  delivery    delivery       @relation(fields: [deliveryId], references: [id])
}