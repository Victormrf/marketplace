generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      String
  createdAt DateTime  @default(now())
  Customer  customer?
  Seller    seller?
  reviews   review[] 
}

model customer {
  id      String  @id @default(uuid())
  userId  String  @unique
  address String
  phone   String
  user    user    @relation(fields: [userId], references: [id])
  orders  order[]
}

model seller {
  id          String    @id @default(uuid())
  userId      String    @unique
  storeName   String
  description String?
  rating      Float     @default(0)
  products    product[]
  user        user      @relation(fields: [userId], references: [id])
  reviews     review[]
}

model product {
  id          String       @id @default(uuid())
  sellerId    String
  name        String
  description String?
  price       Float
  stock       Int
  category    String
  createdAt   DateTime     @default(now())
  orderItems  order_item[]
  seller      seller       @relation(fields: [sellerId], references: [id])
  reviews     review[]
}

model order {
  id         String       @id @default(uuid())
  customerId String
  totalPrice Float
  status     String
  createdAt  DateTime     @default(now())
  customer   customer     @relation(fields: [customerId], references: [id])
  orderItems order_item[]
  payment    payment?
}

model order_item {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Float
  order     order   @relation(fields: [orderId], references: [id])
  product   product @relation(fields: [productId], references: [id])
}

model payment {
  id        String   @id @default(uuid())
  orderId   String   @unique
  amount    Float
  status    String
  createdAt DateTime @default(now())
  order     order    @relation(fields: [orderId], references: [id])
}

model review {
  id         String   @id @default(uuid())
  user       user     @relation(fields: [userId], references: [id])
  userId     String   
  product    product? @relation(fields: [productId], references: [id])
  productId  String?
  seller     seller?  @relation(fields: [sellerId], references: [id])
  sellerId   String?
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
}